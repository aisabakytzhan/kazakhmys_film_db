1. Задачи по базе данных
1.1. Развернуть PostgreSQL и выполнить SQL-дамп init.sql для создания базы данных.
1.2. Проверить наличие и корректность следующих таблиц в схеме content:
        film_work
        genre
        genre_film_work
        person
        person_film_work

1.3. Убедиться в наличии связей "многие ко многим" между:
        фильмами и жанрами (genre_film_work)
        фильмами и участниками (person_film_work), с указанием роли (role)

1.4. При необходимости создать диаграмму связей таблиц (ERD).

2. Обработка и анализ данных
2.1. Извлечь данные из базы для последующего анализа. Инструменты: Python (pandas + psycopg2)
2.2. Выполнить базовую очистку и агрегацию данных:
        Преобразование дат к нужному формату
        Объединение связанных таблиц для удобного анализа (JOIN)

3. Построение визуализаций
3.1. Построить следующие аналитические графики:

А. Временной анализ:
    График количества фильмов по годам (creation_date)
    Динамика средней оценки фильмов (rating) по годам

B. Анализ жанров:
    Диаграмма количества фильмов в каждом жанре
    Топ-10 самых популярных жанров по числу фильмов

C. Анализ персоналий:
    Распределение ролей (актер, режиссёр, сценарист) по числу участий
    Топ-10 актёров с наибольшим числом фильмов

D. Прочее:
    Гистограмма распределения оценок фильмов (rating)
    Распределение фильмов по типу (type) — например, movie, tv_show

4. Выходные материалы
4.1. SQL-скрипт или инструкции по развёртыванию базы данных
4.2. Jupyter Notebook или Python-скрипт с:
    SQL-запросами
    Графиками (matplotlib, seaborn, plotly и т.п.)

4.3. Документация:
    Краткое описание структуры данных
    Инструкция по запуску анализа

5. Технические требования
    Язык программирования: Python 3.10+
    СУБД: PostgreSQL 13+
    Средства визуализации: matplotlib, seaborn, plotly или альтернативные
    Результаты должны быть сохранены в открытом репозитории в гитхаб

